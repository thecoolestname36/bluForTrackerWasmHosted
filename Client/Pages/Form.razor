@page "/{version}"
@using Microsoft.AspNetCore.Components.Forms
@using Blazored.LocalStorage
@using BluForTracker.Shared
@using BluForTracker.Client.DataModels

<PageTitle>User Form</PageTitle>

<div class="container">
    <h2>User Form</h2>

    <EditForm Model="@_formData" OnValidSubmit="async () => await OnSubmit()">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="label">Username (Max @UserFormModel.LabelMaxChars characters):</label>
            <InputText @bind-Value="_formData.Label" class="form-control required" id="label" required />
            <ValidationMessage For="@(() => _formData.Label)" />
        </div>

        <div class="form-group">
            <label for="color">Marker Color:</label>
            <input type="color" @bind="_formData.Color" id="color" required />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
    
    <div style="padding-top: 20px">
        <button class="btn btn-outline-secondary" @onclick="ShowShare">Share</button>
        <div style="text-align:center;display:@showShare">
            <div>
                <img style="width:65%;max-width:400px;" src="images/qr-code.svg"/>
            </div>
            <div>
                <span>@NavManager.BaseUri</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] 
    public required NavigationManager NavManager { get; set; }
    
    [Inject]
    public required ILocalStorageService LocalStorage { get; set; }

    [Parameter]
    public required string Version { get; set; }

    [Parameter]
    public string? FormData { get; set; }

    private UserFormModel _formData = new()
    {
        Team = Team.None
    };

    private string showShare = "none";

    private void ShowShare() => showShare = "initial";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (await LocalStorage.ContainKeyAsync(nameof(UserStore)))
        {
            // If user exists in storage, continue to the map page
            NavManager.NavigateTo($"/{Version}/map");
        }
    }

    private async Task OnSubmit()
    {
        await LocalStorage.SetItemAsync(nameof(UserStore), _formData.ToUserStore());
        NavManager.NavigateTo($"/{Version}/map");
    }
}
