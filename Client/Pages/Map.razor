@page "/"
@using System.Collections.Concurrent
@using Microsoft.AspNetCore.SignalR.Client
@using Blazored.LocalStorage
@using BluForTracker.Client.DataModels
@using BluForTracker.Client.Services
@using BluForTracker.Shared
@inject IConfiguration Configuration
@implements IAsyncDisposable
<PageTitle>Map @_currentVersion</PageTitle>

<div id="map-page-container">
    <div id="map-menu-container">
        <button type="button" class="btn btn-warning btn-lg" @onclick="Scrub">Scrub</button>
        <button
            type="button"
            class="btn btn-lg location @(_broadcastingPosition ? "location-on" : "")"
            @onclick="BroadcastPositionOnClick"
            disabled="@(!_mapReady)">
            @(_broadcastingPosition ? "Location(On)" : "Location(Off)")
        </button>
        <button type="button" class="btn btn-danger btn-lg" style="float:right" @onclick="Logout">Logout</button>

    </div>
    <div id="map-container">
        <div id="map"></div>
        <div id="map-player-box">
            @if(_hubConnection?.State == HubConnectionState.Connected)
            {
                <table class="tableScrollable">
                    <thead>
                    <tr>
                        <th style="width:160px" >
                            <button class="btn btn-block btn-outline-dark" @onclick="() => SetFrameOnClick(latitude: 40.12, longitude: -100.45, zoom: 4.0)">Username</button>
                        </th>
                        <th>
                            <button class="btn btn-block btn-outline-dark" @onclick="() => SetFrameOnClick(latitude: 40.12, longitude: -100.45, zoom: 4.0)">Message</button>
                        </th>
                    </tr>
                    </thead>
                    <tbody>
                    
                    @{
                        var listed = new Dictionary<string, (InfoMarker? infoMarker, Marker? marker)>();
                        @foreach (var infoMarker in _infoMarkers.Values.ToList())
                        {
                            listed.Add(infoMarker.Id, (infoMarker, null));
                        }
                        @foreach (var marker in _markers.Values.ToList())
                        {
                            if (listed.TryGetValue(marker.Id, out var user))
                            {
                                listed[marker.Id] = (user.infoMarker, marker);
                            }
                            else
                            {
                                listed.Add(marker.Id, (null, marker));
                            }
                        }
                    }
                    @foreach (var user in listed)
                    {
                        var labelColor = user.Value.infoMarker?.LabelColor ?? user.Value.marker?.Color ?? "#000";
                        <tr style="cursor:pointer; box-shadow:0px -16px 32px inset @labelColor">
                            <td style="width:260px">
                                @{
                                    if (user.Value.marker is null)
                                    {
                                        <button class="btn btn-outline-dark btn-sm btn-block" @onclick="() => SetFrameOnClick(latitude: 40.12, longitude: -100.45, zoom: 4.0)">
                                            @($"{user.Value.infoMarker?.Label ?? "[No Name]"}: Not Broadcasting")
                                        </button>
                                    }
                                    else
                                    {
                                        var diff = DateTimeOffset.UtcNow - user.Value.marker.UpdatedOn;
                                        if (diff.TotalSeconds < 15)
                                        {
                                            <button type="button" class="btn btn-outline-dark btn-sm btn-block" @onclick="() => SetFrameOnClick(user.Value.marker)">
                                                @($"{user.Value.marker.Label}: {(user.Value.marker.Connected ? "Broadcasting" : "Not Broadcasting")}")
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-danger btn-sm btn-block" @onclick="async () => await RemoveMarker(user.Key)">
                                                <span>@($"{user.Value.marker.Label}: Stale > 15s")</span>
                                            </button>
                                        }
                                    }
                                }
                            </td>
                        
                            @if (user.Key == _myInfoMarker?.Id)
                            {
                                <td>
                                    <button class="btn btn-outline-dark btn-sm btn-block" @onclick="() => SetFrameOnClick(latitude: 40.12, longitude: -100.45, zoom: 4.0)">
                                        @(string.IsNullOrEmpty(user.Value.infoMarker?.Message) ? "[No Message]" : user.Value.infoMarker.Message)
                                    </button>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <button class="btn btn-outline-dark btn-sm btn-block" @onclick="() => SetFrameOnClick(user.Value.infoMarker)">
                                        @(string.IsNullOrEmpty(user.Value.infoMarker?.Message) ? "[No Message]" : user.Value.infoMarker.Message)
                                    </button>
                                </td>
                            }
                        </tr>
                    }
                    </tbody>
                </table>
            } else
            {
                switch(_hubConnection?.State)
                {
                    case HubConnectionState.Connecting:
                    case HubConnectionState.Reconnecting:
                        <div class="alert alert-warning" role="alert">@_hubConnection?.State.ToString()</div>
                        break;
                    case HubConnectionState.Disconnected:
                        <div class="alert alert-danger" role="alert">@_hubConnection?.State.ToString()</div>
                        break;
                    case null:
                    default:
                        <div class="alert alert-secondary" role="alert">No hub connection</div>
                        break;
                }
            }
        </div>
    </div>
</div>
<script async src="https://maps.googleapis.com/maps/api/js?key=@(Configuration.GetValue<string>("GoogleMapsApiKey"))&loading=async&callback=window.mapModule.mapsCallback&libraries=maps,marker"></script>

@code {
    [Inject]
    public required BluForTrackerApiService ApiService { get; set; }
    
    [Inject]
    public required NavigationManager NavManager { get; set; }

    [Inject]
    public required IJSRuntime JsRuntime { get; set; }

    [Inject]
    public required ILocalStorageService LocalStorage { get; set; }
    
    [Inject]
    public required CurrentUserHandler CurrentUserHandler { get; set; }

    struct GeolocationCoordinates
    {
        public required double Latitude { get; init; }
        public required double Longitude { get; init; }
    }

    IJSObjectReference? _mapModuleJs = default!;
    GeolocationCoordinates? _currentLocation;
    InfoMarker? _myInfoMarker;
    HubConnection? _hubConnection;
    ConcurrentDictionary<string, Marker> _markers = new();
    ConcurrentDictionary<string, InfoMarker> _infoMarkers = new();
    CancellationTokenSource _jobTokenSource = new();
    CancellationTokenSource _sendLocationLoopTokenSource = new();
    bool _mapReady = false;
    bool _broadcastingPosition = false;
    Task? _viewRenderLoopTask;
    Task? _sendMyInfoMarkerLoopTask;
    string _currentVersion = "no-version";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if(firstRender)
        {
            _currentVersion = await HandleVersionCheck();
            
            var collocatedJs = await JsRuntime.InvokeAsync<IJSObjectReference>("import", $"./Pages/Map.razor.js?v={_currentVersion}");
            // TODO - Convert this to a JS Interop with JSImport
            _mapModuleJs = await collocatedJs.InvokeAsync<IJSObjectReference>("CreateMapModule");
            await MapLoadLoop();
            await GetHubConnection();
            _viewRenderLoopTask = ViewRenderLoop();
            _sendMyInfoMarkerLoopTask = SendMyInfoMarkerLoop();
        }
    }

    private async Task<string> HandleVersionCheck()
    {
        const string clientVersion = "client_version";
        var currentVersionTask = ApiService.CurrentVersion();
        var currentClientVersion = await LocalStorage.GetItemAsStringAsync(clientVersion);
        var currentVersion = await currentVersionTask;
        if (!string.IsNullOrEmpty(currentClientVersion) && currentClientVersion != currentVersion)
        {
            await LocalStorage.RemoveItemAsync(clientVersion);
            await JsRuntime.InvokeVoidAsync("alert", "New version available!\nClick OK to update.");
            NavManager.NavigateTo($"/clearCache", true);
        }
        await LocalStorage.SetItemAsStringAsync(clientVersion, currentVersion);
        return currentVersion;
    }

    PeriodicTimer? _mapLoadTimer;
    async Task MapLoadLoop()
    {
        if (_jobTokenSource.IsCancellationRequested) return;
        _mapLoadTimer ??= new(TimeSpan.FromMilliseconds(125));
        try
        {
            while(await _mapLoadTimer.WaitForNextTickAsync(_jobTokenSource.Token))
            {
                if(_mapModuleJs == null || await _mapModuleJs.InvokeAsync<bool>("isGoogleMapsApiLoading")) continue;
                await _mapModuleJs.InvokeVoidAsync("addListenerOnceMapIdle", DotNetObjectReference.Create(this));
                _mapLoadTimer.Dispose();
                _mapLoadTimer = null;
                return;
            }   
        } catch {}
    }

    PeriodicTimer? _viewRenderTimer;
    async Task ViewRenderLoop()
    {
        if (_jobTokenSource.IsCancellationRequested) return;
        _viewRenderTimer ??= new(TimeSpan.FromSeconds(1));
        try
        {
            while(await _viewRenderTimer.WaitForNextTickAsync(_jobTokenSource.Token))
            {
                StateHasChanged();
            }
        }
        catch {}
    }

    PeriodicTimer? _sendLocationTimer;
    async Task SendLocationLoop()
    {
        if (_sendLocationLoopTokenSource.IsCancellationRequested) return;
        
        _sendLocationTimer ??= new(TimeSpan.FromMilliseconds(125));
        var sending = false;

        try
        {
            while(await _sendLocationTimer.WaitForNextTickAsync(_sendLocationLoopTokenSource.Token))
            {
                if(sending) continue;
                if (_currentLocation == null) continue;

                var hubConnection = await GetHubConnection();
                if(hubConnection.State == HubConnectionState.Connected && _currentLocation.HasValue)
                {
                    var marker = new Marker
                    {
                        Latitude = _currentLocation.Value.Latitude,
                        Longitude = _currentLocation.Value.Longitude,
                        Team = CurrentUserHandler.CurrentUser?.Team ?? Team.None,
                        Label = CurrentUserHandler.CurrentUser?.Label ?? "",
                        Color = CurrentUserHandler.CurrentUser?.Color ?? "#000000",
                        Connected = true
                    };
                    _currentLocation = null;
                    sending = true;
                    await hubConnection.SendAsync(Routing.MarkerHub.Server.BroadcastMarker, marker);
                    sending = false;
                }
            }
        } catch {}
    }

    PeriodicTimer? _sendMyInfoMarkerTimer;
    async Task SendMyInfoMarkerLoop()
    {
        if (_jobTokenSource.IsCancellationRequested) return;
        _sendMyInfoMarkerTimer ??= new(TimeSpan.FromSeconds(1));
        var sending = false;
        try
        {
            while(await _sendMyInfoMarkerTimer.WaitForNextTickAsync(_jobTokenSource.Token))
            {
                if(sending) continue;

                var hubConnection = await GetHubConnection();
                if(hubConnection.State == HubConnectionState.Connected && _myInfoMarker != null)
                {
                    var infoMarker = new InfoMarker
                    {
                        Team = CurrentUserHandler.CurrentUser?.Team ?? Team.None,
                        Label = _myInfoMarker.Label,
                        LabelColor = _myInfoMarker.LabelColor,
                        Message = _myInfoMarker.Message,
                        Latitude = _myInfoMarker.Latitude,
                        Longitude = _myInfoMarker.Longitude
                    };
                    _myInfoMarker = null;
                    sending = true;
                    await hubConnection.SendAsync(Routing.MarkerHub.Server.BroadcastInfoMarker, infoMarker);
                    sending = false;
                }
            }
        } catch {}
    }

    private bool _broadcastPositionOnClick = false;
    private async Task BroadcastPositionOnClick()
    {
        if (_broadcastPositionOnClick) return;
        _broadcastPositionOnClick = true;
        await _mapModuleJs.InvokeVoidAsync("watchPosition");
        if (_broadcastingPosition == false)
        {
            _broadcastingPosition = true;
            _sendLocationLoopTokenSource = new CancellationTokenSource();
            SendLocationLoop();
        }
        else
        {
            await _mapModuleJs.InvokeVoidAsync("watchPositionStop");
            await _sendLocationLoopTokenSource.CancelAsync();
            _broadcastingPosition = false;
        }

        _broadcastPositionOnClick = false;
    }

    [JSInvokable]
    public void OnMapIdle()
    {
        _mapReady = true;
    }

    [JSInvokable]
    public void UpdateCurrentPosition(double lat, double lng) => _currentLocation = new GeolocationCoordinates
        {
            Latitude = lat,
            Longitude = lng
        };

    [JSInvokable]
    public void UpdateMyInfoMarker(string message, double lat, double lng) => _myInfoMarker = new InfoMarker()
        {
            Team = CurrentUserHandler.CurrentUser?.Team ?? Team.None,
            Label = CurrentUserHandler.CurrentUser?.Label ?? "unk",
            LabelColor = CurrentUserHandler.CurrentUser?.Color ?? "#000000",
            Message = string.IsNullOrEmpty(message) ? "" : message,
            Latitude = lat,
            Longitude = lng
        };

    [JSInvokable]
    public async Task RemoveInfoMarker(string key)
    {
        var hubConnection = await GetHubConnection();
        if(hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync(Routing.MarkerHub.Server.RemoveInfoMarker, key);
        }
    }

    async Task RemoveMarker(string key)
    {
        var hubConnection = await GetHubConnection();
        if(hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync(Routing.MarkerHub.Server.RemoveMarker, key);
        }
    }

    async Task Scrub()
    {
        var hubConnection = await GetHubConnection();
        if(hubConnection.State == HubConnectionState.Connected)
        {
            await hubConnection.SendAsync(Routing.MarkerHub.Server.Exit);
        }
    }

    async Task Logout()
    {
        var hubConnection = await GetHubConnection();
        if(hubConnection.State == HubConnectionState.Connected)
        {
            await _jobTokenSource.CancelAsync();
            await _sendLocationLoopTokenSource.CancelAsync();
            await hubConnection.SendAsync(Routing.MarkerHub.Server.Exit);
            await LocalStorage.ClearAsync();
            NavManager.NavigateTo($"/", true);
        }
    }

    Task SetFrameOnClick(Marker? marker) => marker == null 
        ? Task.CompletedTask
        : SetFrameOnClick(marker.Latitude, marker.Longitude);

    Task SetFrameOnClick(InfoMarker? infoMarker) => infoMarker == null 
        ? Task.CompletedTask 
        : SetFrameOnClick(infoMarker.Latitude, infoMarker.Longitude);

    Task SetFrameOnClick(double latitude, double longitude, double zoom = 16.0) => Task.WhenAll([
        _mapModuleJs?.InvokeVoidAsync("setCenter", latitude, longitude).AsTask() ?? Task.CompletedTask,
        _mapModuleJs?.InvokeVoidAsync("setZoom", zoom).AsTask() ?? Task.CompletedTask,
    ]);

    public async Task<HubConnection> GetHubConnection()
    {
        if (_hubConnection == null)
        {
            var builder = new UriBuilder(NavManager.BaseUri);
            builder.Path += Routing.MarkerHub.Path;
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(builder.Uri)
                .Build();
            _hubConnection.ServerTimeout = TimeSpan.FromSeconds(15);
            _hubConnection.KeepAliveInterval = TimeSpan.FromSeconds(5);
            _hubConnection.On<string>(Routing.MarkerHub.Client.ReceiveConnectionId, async (connectionId) =>
            {
                var oldConnectionId = await LocalStorage.GetItemAsStringAsync("connection_id");
                if (!string.IsNullOrEmpty(oldConnectionId))
                {
                    var hubConnection = await GetHubConnection();
                    if (hubConnection.State == HubConnectionState.Connected)
                    {
                        await hubConnection.SendAsync(Routing.MarkerHub.Server.UpdateConnectionId, oldConnectionId, CurrentUserHandler.CurrentUser?.Team ?? Team.None, CurrentUserHandler.CurrentUser?.Color ?? "#000000");
                    }
                }
                await LocalStorage.SetItemAsStringAsync("connection_id", connectionId);
            });
            _hubConnection.On<List<Marker>>(Routing.MarkerHub.Client.SyncMarkers, async (markers) =>
            {
                _markers = new ConcurrentDictionary<string, Marker>(
                    markers.Where(marker => marker.Team == CurrentUserHandler.CurrentUser?.Team).Select(marker => new KeyValuePair<string, Marker>(marker.Id, marker)));
                StateHasChanged();
                await _mapModuleJs.InvokeVoidAsync("syncMarkers", _markers.Values.ToList());
            });
            _hubConnection.On<Marker>(Routing.MarkerHub.Client.ReceiveMarker, async (marker) =>
            {
                if (marker.Team == CurrentUserHandler.CurrentUser?.Team)
                {
                    _markers[marker.Id] = marker;
                    StateHasChanged();
                    await _mapModuleJs.InvokeVoidAsync("receiveMarker", marker);
                }
            });
            _hubConnection.On<string>(Routing.MarkerHub.Client.RemoveMarker, async (key) =>
            {
                _markers.TryRemove(key, out _);
                StateHasChanged();
                await _mapModuleJs.InvokeVoidAsync("removeMarker", key);
            });
            _hubConnection.On<string>(Routing.MarkerHub.Server.Exit, (key) =>
            {
                _markers.TryRemove(key, out _);
                _infoMarkers.TryRemove(key, out _);
                StateHasChanged();
                _mapModuleJs?.InvokeVoidAsync("removeMarker", key);
                _mapModuleJs?.InvokeVoidAsync("removeInfoMarker", key);
            });

            _hubConnection.On<List<InfoMarker>>(Routing.MarkerHub.Client.SyncInfoMarkers, async (infoMarkers) =>
            {
                var list = infoMarkers.Where(infoMarker => infoMarker.Team == CurrentUserHandler.CurrentUser?.Team).ToList();
                _infoMarkers.Clear();
                list.ForEach(m => _infoMarkers.TryAdd(m.Id, m));
                await _mapModuleJs.InvokeVoidAsync("syncInfoMarkers", list);
            });
            _hubConnection.On<InfoMarker>(Routing.MarkerHub.Client.ReceiveInfoMarker, async (infoMarker) =>
            {
                if (infoMarker.Team == CurrentUserHandler.CurrentUser?.Team)
                {
                    _infoMarkers.AddOrUpdate(infoMarker.Id, infoMarker, (key, value) => infoMarker);
                    await _mapModuleJs.InvokeVoidAsync("receiveInfoMarker", infoMarker);
                }
            });
            _hubConnection.On<string>(Routing.MarkerHub.Client.RemoveInfoMarker, async (key) =>
            {
                _infoMarkers.TryRemove(key, out _);
                await _mapModuleJs.InvokeVoidAsync("removeInfoMarker", key);
            });
        }
        if(_hubConnection.State == HubConnectionState.Disconnected)
        {
            await _hubConnection.StartAsync();
        }
        return _hubConnection;
    }

    #region disposal

    public async ValueTask DisposeAsync()
    {
        try
        {
            await _jobTokenSource.CancelAsync();
            await _sendLocationLoopTokenSource.CancelAsync();
        }
        catch { }
        
        _markers.Clear();
        _currentLocation = null;
        await CurrentUserHandler.DisposeAsync();
        if(_hubConnection != null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
            _hubConnection = null;
        }
        if(_mapModuleJs != null)
        {
            await _mapModuleJs.DisposeAsync();
            _mapModuleJs = null;
        }
        _viewRenderTimer?.Dispose();
        _viewRenderTimer = null;
        _viewRenderLoopTask?.Dispose();
        _mapLoadTimer?.Dispose();
        _mapLoadTimer = null;
        _sendLocationTimer?.Dispose();
        _sendLocationTimer = null;
        _sendMyInfoMarkerTimer?.Dispose();
        _sendMyInfoMarkerTimer = null;
        _sendMyInfoMarkerLoopTask?.Dispose();
    }

    #endregion
}
