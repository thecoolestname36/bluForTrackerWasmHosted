@page "/"
@using System.Text
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using BluForTracker.Shared
@inject NavigationManager NavManager

<PageTitle>User Form</PageTitle>

<div class="container">
    <h2>User Form</h2>

    <EditForm Model="@_formData" OnValidSubmit="OnSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="label">Username (Max @MarkerFormModel.LabelMaxChars characters):</label>
            <InputText @bind-Value="_formData.Label" class="form-control required" id="label" required />
            <ValidationMessage For="@(() => _formData.Label)" />
        </div>

        <div class="form-group">
            <label for="team">Team:</label>
            <InputSelect @bind-Value="_formData.Team" id="team" class="form-control" required>
                <option value=""></option>
                @foreach(var item in Enum.GetValues(typeof(Team)))
                {
                    <option value="@item">@item.ToString()</option>
                }
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="color">Marker Color:</label>
            <input type="color" @bind="_formData.Color" id="color" required />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
</div>

<div style="text-align:center;">
    <img style="width:65%;max-width:400px;" src="images/qr-code.svg" />
</div>

@code {

    private MarkerFormModel _formData = new();

    public class MarkerFormModel
    {
        public const int LabelMaxChars = 28;

        [Required]
        public Team? Team { get; set; }

        [StringLength(LabelMaxChars, ErrorMessage = "Label must be 28 characters or less.")]
        public string Label { get; set; } = "";
        
        [RegularExpression("^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$", ErrorMessage = "Invalid Format")]
        public string Color { get; set; } = "#000000";
    }

    private void OnSubmit() => NavManager.NavigateTo($"/map/{Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonSerializer.Serialize(_formData)))}", true);
}
